{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sahil\\\\Downloads\\\\Contact_Management_System-main\\\\frontend\\\\src\\\\components\\\\DuplicateContacts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { mergeContacts } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DuplicateContacts = ({\n  duplicates = [],\n  reloadDuplicates,\n  reloadContacts\n}) => {\n  _s();\n  useEffect(() => {\n    reloadDuplicates(); // Load duplicates when component mounts\n  }, []);\n  const handleMerge = async group => {\n    const contactIds = group.map(contact => contact._id);\n    const {\n      name,\n      email,\n      phone\n    } = group[0]; // Using the first contact's data as base\n    try {\n      await mergeContacts({\n        contactIds,\n        name,\n        email,\n        phone\n      });\n      reloadDuplicates(); // Refresh the duplicate contacts list\n      reloadContacts(); // Refresh the main contacts list\n    } catch (error) {\n      console.error(\"Error merging contacts:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"duplicates\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Duplicate Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), duplicates.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: duplicates.map((group, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [group.map(contact => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [contact.name, \" - \", contact.email, \" - \", contact.phone]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 19\n          }, this)\n        }, contact._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleMerge(group),\n          children: \"Merge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No duplicate contacts found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(DuplicateContacts, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = DuplicateContacts;\nexport default DuplicateContacts;\nvar _c;\n$RefreshReg$(_c, \"DuplicateContacts\");","map":{"version":3,"names":["React","useEffect","mergeContacts","jsxDEV","_jsxDEV","DuplicateContacts","duplicates","reloadDuplicates","reloadContacts","_s","handleMerge","group","contactIds","map","contact","_id","name","email","phone","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","idx","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Sahil/Downloads/Contact_Management_System-main/frontend/src/components/DuplicateContacts.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { mergeContacts } from \"../api\";\r\n\r\nconst DuplicateContacts = ({\r\n  duplicates = [],\r\n  reloadDuplicates,\r\n  reloadContacts,\r\n}) => {\r\n  useEffect(() => {\r\n    reloadDuplicates(); // Load duplicates when component mounts\r\n  }, []);\r\n\r\n  const handleMerge = async (group) => {\r\n    const contactIds = group.map((contact) => contact._id);\r\n    const { name, email, phone } = group[0]; // Using the first contact's data as base\r\n    try {\r\n      await mergeContacts({ contactIds, name, email, phone });\r\n\r\n      reloadDuplicates(); // Refresh the duplicate contacts list\r\n      reloadContacts(); // Refresh the main contacts list\r\n    } catch (error) {\r\n      console.error(\"Error merging contacts:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"duplicates\">\r\n      <h2>Duplicate Contacts</h2>\r\n      {duplicates.length > 0 ? (\r\n        <ul>\r\n          {duplicates.map((group, idx) => (\r\n            <li key={idx}>\r\n              {group.map((contact) => (\r\n                <div key={contact._id}>\r\n                  <span>\r\n                    {contact.name} - {contact.email} - {contact.phone}\r\n                  </span>\r\n                </div>\r\n              ))}\r\n              <button onClick={() => handleMerge(group)}>Merge</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No duplicate contacts found.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DuplicateContacts;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,aAAa,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,iBAAiB,GAAGA,CAAC;EACzBC,UAAU,GAAG,EAAE;EACfC,gBAAgB;EAChBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJR,SAAS,CAAC,MAAM;IACdM,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,WAAW,GAAG,MAAOC,KAAK,IAAK;IACnC,MAAMC,UAAU,GAAGD,KAAK,CAACE,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,GAAG,CAAC;IACtD,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAM,CAAC,GAAGP,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,IAAI;MACF,MAAMT,aAAa,CAAC;QAAEU,UAAU;QAAEI,IAAI;QAAEC,KAAK;QAAEC;MAAM,CAAC,CAAC;MAEvDX,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACpBC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,oBACEf,OAAA;IAAKiB,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBlB,OAAA;MAAAkB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1BpB,UAAU,CAACqB,MAAM,GAAG,CAAC,gBACpBvB,OAAA;MAAAkB,QAAA,EACGhB,UAAU,CAACO,GAAG,CAAC,CAACF,KAAK,EAAEiB,GAAG,kBACzBxB,OAAA;QAAAkB,QAAA,GACGX,KAAK,CAACE,GAAG,CAAEC,OAAO,iBACjBV,OAAA;UAAAkB,QAAA,eACElB,OAAA;YAAAkB,QAAA,GACGR,OAAO,CAACE,IAAI,EAAC,KAAG,EAACF,OAAO,CAACG,KAAK,EAAC,KAAG,EAACH,OAAO,CAACI,KAAK;UAAA;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C;QAAC,GAHCZ,OAAO,CAACC,GAAG;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIhB,CACN,CAAC,eACFtB,OAAA;UAAQyB,OAAO,EAAEA,CAAA,KAAMnB,WAAW,CAACC,KAAK,CAAE;UAAAW,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GARlDE,GAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASR,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAELtB,OAAA;MAAAkB,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACnC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CA7CIJ,iBAAiB;AAAAyB,EAAA,GAAjBzB,iBAAiB;AA+CvB,eAAeA,iBAAiB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}